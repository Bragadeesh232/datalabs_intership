
14/02/2024
.......................................................... Public/protected/private classes in python .............................................................. 

class Car:
    def __init__(self, make, model, year):
        self.make = make                  
        self._model = model               
        self.__year = year                

    def get_make(self):                  # Public method
        return self.make

    def _get_model(self):                # Protected method
        return self._model

    def __get_year(self):                # Private method
        return self.__year


car = Car("Toyota", "Corolla", 2022)

# accessing public member
print("Make:", car.make)
print("Public method (Make):", car.get_make())

# accessing protected members
print("Protected attribute (Model):", car._model)
print("Protected method (Model):", car._get_model())

# accessing private member
print("Private attribute (Year) (indirect access):", car._Car__year)
print("Private method (Year) (indirect access):", car._Car__get_year())

........................................................ Logger in python ..................................................................

import logging

class Logger:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._logger = logging.getLogger(__name__)
            cls._instance._logger.setLevel(logging.DEBUG)
            formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
            stream_handler = logging.StreamHandler()
            stream_handler.setFormatter(formatter)
            cls._instance._logger.addHandler(stream_handler)
        return cls._instance

    def log_message(self, message):
        self._logger.info(message)

# Example usage:
logger_instance1 = Logger()
logger_instance2 = Logger()

print(logger_instance1 is logger_instance2)  # Output will be True

logger_instance1.log_message("This is a log message.")

.................................................... Constructor ...................................................

constructor is a special method used for initializing objects of a class. It's called automatically when a new instance of the class is created. In Python, the constructor method is called __init__


Example : 
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Creating an instance of the Person class
person1 = Person("Alice", 30)

# Accessing attributes of the person object
print("Name:", person1.name)
print("Age:", person1.age)


