
16/02/2024
.......................................................... Corrected     Public/protected/private classes in python .............................................................. 


class Car:
    def __init__(self, make, model, year):
        self.make = make
        self._model = model
        self.__year = year

    def get_make(self):  # Public method
        return self.make

    def _get_model(self):  # Protected method
        return self._model

    def get_year(self):  # Public method to access private year
        return self.__year

car = Car("Toyota", "Corolla", 2022)


print("Make:", car.make)
print("Public method (Make):", car.get_make())


print("Protected attribute (Model):", car._model)
print("Protected method (Model):", car._get_model())

# accessing private member using public getter method
print("Private attribute (Year):", car.get_year())

# AttributeError: '_Car__year' is a private attribute of 'Car'
# You cannot directly access a private attribute. You can only access it through its getter method.

............................................................using escape characters in python.......................................

name = input("Enter your name: ")
age = input("Enter your age: ")

# Using escape characters to format the output
print("Hello, " + name + "!")  # Newline is automatically added after the end of the print statement
print("Your age is: " + age)


print("Hello, " + name + "!\nYour age is: " + age)
print("Hello, " + name + "!\tYour age is: " + age)

............................................................ Average of an array of double type input from the user at runtime............................

n = int(input("Enter the number of elements: "))
arr = [float(input(f"Enter element {i + 1}: ")) for i in range(n)]
average = sum(arr) / len(arr)
print("Average:", average)

.............................................................Reversing an array of numbers.................................

arr = list(map(int, input("Enter the array elements separated by space: ").split()))
reversed_arr = arr[::-1]
print("Reversed array:", reversed_arr)


..........................................................Checking if a person's age is above 18 and if he/she is an Indian citizen.......................

age = int(input("Enter your age: "))
citizenship = input("Are you an Indian citizen? (yes/no): ")
if age > 18 and citizenship.lower() == "indian":
    print("Eligible to vote")
else:
    print("Not eligible to vote")

.........................................Finding the maximum number from 5 numbers..........................

numbers = [int(input(f"Enter number {i + 1}: ")) for i in range(5)]
max_number = max(numbers)
print("Maximum number:", max_number)

.........................................Calculating factorial of a given number.........................

num = int(input("Enter a number: "))
fact = 1
for i in range(1, num + 1):
    fact *= i
print("Factorial of", num, ":", fact)

.......................................... Employee program ...................................


class Employee:
    def __init__(self, name, age, job_title):
        self.name = name
        self.age = age
        self.job_title = job_title
        self.salary = self.assign_salary()

    def assign_salary(self):
        if self.job_title.lower() == "fresher":
            return 20000
        elif self.job_title.lower() == "team member":
            return 30000
        elif self.job_title.lower() == "team leader":
            return 40000
        elif self.job_title.lower() == "manager":
            return 50000
        else:
            print("Error: Invalid job title")
            return None

    def validate_input(self):
        if len(self.name) > 20:
            print("Error: Employee name should not exceed 20 characters")
            return False
        if self.age > 60:
            print("Error: Employee age should not exceed 60 years")
            return False
        if self.job_title.lower() not in ["fresher", "team member", "team leader", "manager"]:
            print("Error: Invalid job title")
            return False
        return True

    def print_details(self):
        if self.salary is not None:
            with open("EmployerDetails.txt", "w") as file:
                file.write(f"Employee Name: {self.name}\n")
                file.write(f"Employee Age: {self.age}\n")
                file.write(f"Employee Job Title: {self.job_title}\n")
                file.write(f"Employee Salary: {self.salary}\n")
            print("Details printed to EmployerDetails.txt")


def main():
    name = input("Enter employee name: ")
    age = int(input("Enter employee age: "))
    job_title = input("Enter employee job title: ")

    emp = Employee(name, age, job_title)

    if emp.validate_input():
        emp.print_details()


if __name__ == "__main__":
    main()



