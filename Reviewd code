                             PRIME Or NOT

number = int(input("Enter a number: "))

if number <= 1:
    print(number, "is not a prime number.")
    exit()

if number == 2 or number == 3:
    print(number, "is a prime number.")
    exit()

divisor = 2
while divisor * divisor <= number:
    if (number // divisor) * divisor == number:
        print(number, "is not a prime number.")
        exit()
    divisor += 1

print(number, "is a prime number.")



                            ABSTRACTION:

from abc import ABC, abstractmethod   
class Car(ABC):   
    @abstractmethod
    def mileage(self):   
        pass  
  
class Tesla(Car):   
    def mileage(self):   
        print("The mileage is 30kmph")   
class Suzuki(Car):   
    def mileage(self):   
        print("The mileage is 25kmph ")   
class Duster(Car):   
     def mileage(self):   
          print("The mileage is 24kmph ")   
  
class Renault(Car):   
    def mileage(self):   
            print("The mileage is 27kmph ")   
          

t= Tesla ()   
t.mileage()   
  
r = Renault()   
r.mileage()   
  
s = Suzuki()   
s.mileage()   
d = Duster()   
d.mileage()  




           Single Inheritance


class Animal:
    def __init__(self, name):
        self.name = name

    def sound(self):
        pass

class Dog(Animal):
    def sound(self):
        return "Woof!"

class Cat(Animal):
    def sound(self):
        return "Meow!"

class Cow(Animal):
    def sound(self):
        return "Moo!"

dog = Dog("tommy")
cat = Cat("Kitty")
cow = Cow("Bessie")

print(dog.name + " says " + dog.sound())
print(cat.name + " says " + cat.sound())
print(cow.name + " says " + cow.sound())



                 method overwriding:



class Bird:
def intro(self):
	print("There are many types of birds.")
	
def flight(self):
	print("Most of the birds can fly but some cannot.")

class sparrow(Bird):
def flight(self):
	print("Sparrows can fly.")
	
class ostrich(Bird):
def flight(self):
	print("Ostriches cannot fly.")
	
obj_bird = Bird()
obj_spr = sparrow()
obj_ost = ostrich()

obj_bird.intro()
obj_bird.flight()

obj_spr.intro()
obj_spr.flight()

obj_ost.intro()
obj_ost.flight()



    polymorphism:




class Vehicle:
    def move(self):
        pass

class Car(Vehicle):
    def move(self):
        return "Driving"

class Boat(Vehicle):
    def move(self):
        return "Sailing"

class Airplane(Vehicle):
    def move(self):
        return "Flying"


def describe_movement(vehicle):
    print(vehicle.move())


car = Car()
boat = Boat()
airplane = Airplane()


describe_movement(car)       
describe_movement(boat)      
describe_movement(airplane)  
